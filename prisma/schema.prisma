// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Predictions   Predictions[]
    points        Int           @default(0)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Fixture {
    id            String        @id
    homeTeamId    String
    awayTeamId    String
    homeTeam      Team          @relation("homeTeam", fields: [homeTeamId], references: [id])
    awayTeam      Team          @relation("awayTeam", fields: [awayTeamId], references: [id])
    homeTeamScore Int
    awayTeamScore Int
    matchweekId   String
    played        Boolean
    Matchweek     Matchweek     @relation(fields: [matchweekId], references: [id])
    Predictions   Predictions[]
    open          Boolean       @default(true)

    @@index([homeTeamId])
    @@index([awayTeamId])
    @@index([matchweekId])
}

model Team {
    id   String @id
    name String

    homeFixtures Fixture[] @relation("homeTeam")
    awayFixtures Fixture[] @relation("awayTeam")
}

model Matchweek {
    id       String    @id
    name     String
    fixtures Fixture[]
    played   Boolean
}

model Predictions {
    id        String  @id
    userId    String
    fixtureId String
    homeScore Int
    awayScore Int
    Fixture   Fixture @relation(fields: [fixtureId], references: [id])
    User      User    @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([fixtureId])
}
